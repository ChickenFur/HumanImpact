// Generated by CoffeeScript 1.4.0
(function() {

  define(['utils', 'initialize_svg'], function(utils, init) {
    var create, drag, links;
    drag = d3.behavior.drag().on('drag', function() {
      var dx, dy;
      dx = d3.event.dx;
      dy = d3.event.dy;
      d3.select(this).attr({
        cx: function(d) {
          return d.x += dx;
        },
        cy: function(d) {
          return d.y += dy;
        }
      });
      d3.selectAll('.link').attr({
        x1: function(d) {
          return d.from.x;
        },
        y1: function(d) {
          return d.from.y;
        },
        x2: function(d) {
          return d.to.x;
        },
        y2: function(d) {
          return d.to.y;
        }
      });
      return d3.selectAll('.name').attr({
        x: function(d) {
          return d.x;
        },
        y: function(d) {
          return d.y;
        }
      });
    });
    links = [];
    create = function(wiki) {
      var axis, data, dates, end, max, min, nodes, start, time, xscale;
      init();
      xscale = d3.scale.pow().domain([parseInt(wiki.dob) - 50, parseInt(wiki.dob) + 50]).range([0, innerWidth]);
      d3.select('.graph').append('circle').attr({
        r: 50,
        fill: 'url(#ocean_fill)',
        "class": 'main',
        cy: innerHeight / 2,
        cx: xscale(wiki.dob)
      });
      d3.select('.graph').append('circle').attr({
        r: 50,
        fill: 'url(#globe_highlight)',
        "class": 'main',
        cy: innerHeight / 2,
        cx: xscale(wiki.dob)
      });
      d3.select('.graph').append('text').text(wiki.name).attr({
        fill: 'red',
        x: xscale(wiki.dob),
        y: innerHeight / 2
      });
      dates = wiki.relations.map(function(d) {
        return parseInt(d.dob);
      });
      min = d3.min(dates);
      max = d3.max(dates);
      start = new Date(min, 0, 1);
      end = new Date(max, 0, 1);
      time = d3.time.scale().range([0, innerWidth]).domain([start, end]);
      axis = d3.svg.axis().scale(time).orient('bottom').ticks(10);
      d3.select('.time').call(axis);
      data = wiki.relations.map(function(data, index) {
        return {
          text: data.name,
          i: index,
          x: xscale(parseInt(data.dob) || 1950),
          y: Math.random() * innerHeight,
          fill: utils.rand_c(),
          r: 15
        };
      });
      nodes = d3.select('.graph').selectAll('.node').data(data).enter().append('circle').on('click', function(d) {
        return console.log(d);
      }).on('mouseover', function() {
        return d3.select(this).attr({
          'fill-opacity': 1
        });
      }).on('mouseout', function() {
        return d3.select(this).attr({
          'fill-opacity': .5
        });
      }).attr({
        "class": 'relation',
        'fill-opacity': .5,
        cx: function(d) {
          return d.x;
        },
        cy: function(d) {
          return d.y;
        },
        fill: function(d) {
          return d.fill;
        }
      }).call(drag).transition().duration(1000).ease(d3.ease('cubic-in-out')).delay(function(d, i) {
        return i * 50;
      }).attr({
        r: function(d) {
          return d.r;
        }
      });
      d3.selectAll('.relation').each(function(d, i) {
        return d3.select('.graph').append('text').datum(d).text(d.text).transition().duration(1000).delay(i * 50).ease(d3.ease('cubic-in-out')).attr({
          "class": 'name',
          x: function(d) {
            return d.x - 5;
          },
          y: function(d) {
            return d.y + 15;
          },
          fill: d.fill,
          'font-family': 'deja vu sans mono'
        });
      });
      d3.selectAll('.relation').data().forEach(function(b) {
        var a;
        a = d3.select('.main');
        a = {
          x: a.attr('cx'),
          y: a.attr('cy')
        };
        if (450 > utils.dist(a, b)) {
          return links.push({
            from: a,
            to: b
          });
        }
      });
      return d3.select('.graph').selectAll('.link').data(links).enter().insert('line', '*').attr({
        'stroke-width': 2,
        'stroke-opacity': .01,
        "class": 'link',
        x1: function(d) {
          return d.from.x;
        },
        y1: function(d) {
          return d.from.y;
        },
        x2: function(d) {
          return d.from.x;
        },
        y2: function(d) {
          return d.from.y;
        },
        stroke: function(d) {
          return d.to.fill;
        }
      }).transition().duration(5000).ease(d3.ease('cubic')).attr({
        'stroke-opacity': .3,
        x2: function(d) {
          return d.to.x;
        },
        y2: function(d) {
          return d.to.y;
        }
      });
    };
    return {
      create: create
    };
  });

}).call(this);
