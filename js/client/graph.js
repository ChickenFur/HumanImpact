// Generated by CoffeeScript 1.4.0
(function() {

  define("graph", ["utils", "require", "getPerson"], function(utils, getPerson, require) {
    var count, create, drag, init, links;
    drag = d3.behavior.drag().on('drag', function() {
      var dx, dy, _ref;
      _ref = [d3.event.dx, d3.event.dy], dx = _ref[0], dy = _ref[1];
      d3.select(this).attr({
        cx: function(d) {
          return d.x += dx;
        },
        cy: function(d) {
          return d.y += dy;
        }
      });
      d3.selectAll('line').attr({
        x1: function(d) {
          return d.from.x;
        },
        y1: function(d) {
          return d.from.y;
        },
        x2: function(d) {
          return d.to.x;
        },
        y2: function(d) {
          return d.to.y;
        }
      });
      return d3.selectAll('text').attr({
        x: function(d) {
          return d.x;
        },
        y: function(d) {
          return d.y;
        }
      });
    });
    links = [];
    count = 0;
    create = function(wiki) {
      var axis, data, dates, end, max, min, nodes, start, time, xscale;
      d3.select('svg').remove();
      init();
      xscale = d3.scale.pow().domain([parseInt(wiki.dob) - 50, parseInt(wiki.dob) + 50]).range([0, innerWidth]);
      d3.select('.graph').append('circle').attr({
        r: 25,
        fill: 'none',
        stroke: 'red',
        'stroke-width': '10',
        "class": 'main',
        cy: innerHeight / 2,
        cx: xscale(wiki.dob)
      });
      d3.select('.graph').append('text').text(wiki.name).attr({
        fill: 'red',
        x: xscale(wiki.dob),
        y: innerHeight / 2
      });
      dates = wiki.relations.map(function(d) {
        return parseInt(d.dob);
      });
      min = d3.min(dates);
      max = d3.max(dates);
      console.log(min, max);
      start = new Date(min, 0, 1);
      end = new Date(max, 0, 1);
      window.min = min;
      window.max = max;
      window.s = start;
      window.e = end;
      time = d3.time.scale().range([0, innerWidth - 50]).domain([start, end]);
      axis = d3.svg.axis().scale(time).orient('bottom').ticks(20);
      d3.select('svg').append('g').attr('class', 'time').attr('transform', "translate(0, " + (innerHeight * .95) + ")").call(axis);
      count++;
      if (!wiki.relations) {
        return console.log(wiki);
      }
      data = wiki.relations.map(function(data, index) {
        return {
          text: data.name,
          count: count,
          i: index,
          x: xscale(parseInt(data.dob) || 1950),
          y: Math.random() * innerHeight,
          fill: utils.rand_c(),
          r: 15
        };
      });
      nodes = d3.select('.graph').selectAll('.node').data(data).enter().append('circle').on('click', function(d) {
        return require.getPerson(d.text);
      }).on('mouseover', function() {
        return d3.select(this).attr({
          'fill-opacity': 1
        });
      }).on('mouseout', function() {
        return d3.select(this).attr({
          'fill-opacity': .5
        });
      }).attr({
        "class": 'relation',
        'fill-opacity': .5,
        cx: function(d) {
          return d.x;
        },
        cy: function(d) {
          return d.y;
        },
        fill: function(d) {
          return d.fill;
        }
      }).call(drag).transition().duration(1000).ease(d3.ease('cubic-in-out')).delay(function(d, i) {
        return i * 50;
      }).attr({
        r: function(d) {
          return d.r;
        }
      });
      d3.selectAll('.relation').data().forEach(function(d, i) {
        return d3.select('.graph').append('text').datum(d).text(d.text).transition().delay(500).ease(d3.ease('cubic-in-out')).attr({
          x: function(d) {
            return d.x - 5;
          },
          y: function(d) {
            return d.y + 15;
          },
          fill: d.fill,
          'font-family': 'deja vu sans mono'
        });
      });
      d3.selectAll('.relation').data().forEach(function(b) {
        var a;
        a = d3.select('.main');
        a = {
          x: a.attr('cx'),
          y: a.attr('cy')
        };
        if (150 > utils.dist(a, b)) {
          return links.push({
            from: a,
            to: b
          });
        }
      });
      return d3.select('.graph').selectAll('line').data(links).enter().insert('line', '*').attr({
        'stroke-width': 2,
        'stroke-opacity': .01,
        x1: function(d) {
          return d.from.x;
        },
        y1: function(d) {
          return d.from.y;
        },
        x2: function(d) {
          return d.from.x;
        },
        y2: function(d) {
          return d.from.y;
        },
        stroke: function(d) {
          return d.from.fill;
        }
      }).transition().duration(5000).ease(d3.ease('cubic')).attr({
        'stroke-opacity': .3,
        x2: function(d) {
          return d.to.x;
        },
        y2: function(d) {
          return d.to.y;
        }
      });
    };
    init = function() {
      var body, brush, grad, graph, svg;
      body = d3.select('#graphContainer');
      svg = body.append('svg');
      grad = svg.append('defs').append('linearGradient').attr({
        id: 'g952',
        gradientUnits: 'userSpaceonUse',
        x1: '0%',
        y1: '0%',
        y2: '100%',
        x2: '0%',
        r: '200%'
      }).selectAll('stop').data(['#a7c8d6', '#7089b3']).enter().append('stop').attr({
        'stop-color': function(d) {
          return d;
        },
        offset: function(d, i) {
          return i;
        }
      });
      graph = svg.append('g').attr('class', 'graph');
      return brush = svg.append('g').attr('class', 'brush').attr({
        transform: "translate(0," + (innerHeight * .95) + ")",
        stroke: 'blue`',
        fill: 'url(#g952)',
        'stroke-width': '1'
      }).call(d3.svg.brush().x(d3.scale.identity().domain([0, innerWidth]))).on('brushstart', function() {
        return console.log('strart');
      }).on('brush', function() {
        return console.log('brush');
      }).on('brushend', function() {
        return console.log('end');
      }).selectAll('rect').attr({
        opacity: 1,
        stroke: '#a5b8da',
        rx: '1.5%',
        height: '5%'
      });
    };
    return {
      create: create
    };
  });

}).call(this);
