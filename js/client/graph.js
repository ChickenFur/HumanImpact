// Generated by CoffeeScript 1.4.0

define("graph", ["brush", "utils", "require", "getPerson", "initialize_svg"], function(brush, utils, getPerson, require, init) {
  var chop, create, drag, update, xscale;
  drag = d3.behavior.drag().on('drag', function() {
    var dx, dy;
    dx = d3.event.dx;
    dy = d3.event.dy;
    d3.select(this).attr({
      cx: function(d) {
        return d.x += dx;
      },
      cy: function(d) {
        return d.y += dy;
      }
    });
    d3.selectAll('.link').attr({
      x1: function(d) {
        return d.from.x;
      },
      y1: function(d) {
        return d.from.y;
      },
      x2: function(d) {
        return d.to.x;
      },
      y2: function(d) {
        return d.to.y;
      }
    });
    return d3.selectAll('.name').attr({
      x: function(d) {
        return d.x;
      },
      y: function(d) {
        return d.y;
      }
    });
  });
  update = function(scale) {
    var nodes;
    nodes = d3.selectAll('.relation').attr({
      cx: function(d) {
        return d.x = scale(d.dob);
      }
    });
    d3.selectAll('.link').attr({
      x1: function(d) {
        return d.from.x;
      },
      y1: function(d) {
        return d.from.y;
      },
      x2: function(d) {
        return d.to.x;
      },
      y2: function(d) {
        return d.to.y;
      }
    });
    return d3.selectAll('.name').attr({
      x: function(d) {
        return d.x;
      },
      y: function(d) {
        return d.y;
      }
    });
  };
  chop = function(relations, center) {
    var d, dist, _i, _len;
    dist = function(i) {
      return Math.abs(parseInt(center) - i) + Math.random();
    };
    for (_i = 0, _len = relations.length; _i < _len; _i++) {
      d = relations[_i];
      d.dob = '' + (d.dob.match(/bc/i) ? -1 : +1 * parseInt(d.dob));
    }
    if (relations.length > 100) {
      return relations.filter(function(d) {
        return +d.dob;
      }).sort(function(a, b) {
        return dist(a.dob) - dist(b.dob);
      }).filter(function(d, i) {
        return i < relations.length * .5 || +d.dob > 1990;
      });
    } else {
      return relations;
    }
  };
  xscale = d3.time.scale().range([15, innerWidth - 25]);
  create = function(wiki) {
    var axis, data, diff, from, k, links, max, min, nodes, rel, rel_dates, tr, year;
    links = [];
    init();
    year = d3.time.format("%Y").parse;
    tr = function(v) {
      return xscale(year(v));
    };
    rel = chop(wiki.relations, wiki.dob);
    rel_dates = rel.map(function(d) {
      return d.dob;
    });
    min = d3.min(rel_dates);
    max = d3.max(rel_dates);
    diff = Math.abs(max) - Math.abs(min);
    k = [min, max].map(year);
    xscale.domain([min, max].map(year));
    brush(xscale.copy(), function(b) {
      xscale.domain(b.empty() ? k : b.extent());
      return update(tr);
    });
    wiki.x = tr(wiki.dob);
    wiki.y = innerHeight / 2;
    wiki.links = [];
    'ocean_fill globe_highlight globe_shading'.split(' ').forEach(function(d) {
      return d3.select('.graph').datum(wiki).append('circle').attr({
        fill: "url(#" + d + ")",
        "class": 'main',
        cx: function(d) {
          return d.x;
        },
        cy: function(d) {
          return d.y;
        }
      }).transition().attr({
        r: 50
      });
    });
    d3.select('.graph').append('text').text(wiki.name).attr({
      fill: 'red',
      x: tr(wiki.dob),
      y: innerHeight / 2
    });
    axis = d3.svg.axis().scale(xscale).orient('bottom').ticks(10);
    d3.select('.time').attr('fill', '#333').call(axis);
    data = rel.map(function(data, index) {
      return {
        text: data.name,
        i: index,
        dob: data.dob,
        x: tr(data.dob),
        y: Math.random() * (innerHeight * .9) + 50,
        fill: utils.rand_c(),
        r: 15,
        links: []
      };
    });
    nodes = d3.select('.graph').selectAll('.node').data(data).enter().append('circle').on('click', function(d) {
      return require.getPerson(d.text);
    }).on('mouseover', function(d) {
      console.log(d);
      d3.select(d.link).attr({
        'stroke-opacity': 1,
        'stroke-width': 1
      });
      d3.select(d.title[0][0]).attr({
        opacity: 1,
        'font-size': '1.5em',
        'fill': '#333'
      });
      return d3.select(this).transition().duration(4).attr({
        'fill-opacity': 1,
        'r': 25
      });
    }).on('mouseout', function(d) {
      d3.select(d.link).transition().attr({
        'stroke-opacity': .1,
        'stroke-width': 1
      });
      d3.select(d.title[0][0]).attr({
        'opacity': .7,
        'font-size': '.7em',
        'fill': function(d) {
          return d.fill;
        }
      });
      return d3.select(this).transition().duration(15).attr({
        'fill-opacity': .5,
        'r': 15
      });
    }).attr({
      "class": 'relation',
      'fill-opacity': .5,
      cx: function(d) {
        return d.x = tr(d.dob);
      },
      cy: function(d) {
        return d.y;
      },
      fill: function(d) {
        return d.fill;
      }
    }).call(drag).transition().duration(1000).ease(d3.ease('cubic-in-out')).delay(function(d, i) {
      return i * 50;
    }).attr({
      r: function(d) {
        return d.r;
      }
    });
    d3.selectAll('.relation').each(function(d, i) {
      return d.title = d3.select('.graph').append('text').datum(d).attr('opacity', .7).text(d.text).transition().duration(1000).delay(i * 50).ease(d3.ease('cubic-in-out')).attr({
        'font-size': '.7em',
        "class": 'name',
        x: function(d) {
          return d.x - 15;
        },
        y: function(d) {
          return d.y + 20;
        },
        fill: d.fill,
        'font-family': 'deja vu sans mono'
      });
    });
    from = d3.select('.main').datum();
    d3.selectAll('.relation').each(function(d, i) {
      if (450 > utils.dist(from, d)) {
        return from.links.push({
          from: from,
          to: d,
          link: this
        });
      }
    });
    return d3.select('.graph').selectAll('.link').data(from.links).enter().insert('line', '*').each(function(d) {
      return d.to.link = this;
    }).attr({
      'stroke-width': 2,
      'stroke-opacity': .01,
      "class": 'link',
      x1: function(d) {
        return d.from.x;
      },
      y1: function(d) {
        return d.from.y;
      },
      x2: function(d) {
        return d.from.x;
      },
      y2: function(d) {
        return d.from.y;
      },
      stroke: function(d) {
        return d.to.fill;
      }
    }).transition().duration(5000).ease(d3.ease('cubic')).attr({
      'stroke-opacity': .1,
      x2: function(d) {
        return d.to.x;
      },
      y2: function(d) {
        return d.to.y;
      }
    });
  };
  return {
    create: create
  };
});
